/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Vprojects from '../model/Vprojects';

/**
* Vprojects service.
* @module api/VprojectsApi
* @version 1.0.0
*/
export default class VprojectsApi {

    /**
    * Constructs a new VprojectsApi. 
    * @alias module:api/VprojectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createvprojects operation.
     * @callback module:api/VprojectsApi~createvprojectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vprojects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Vprojects} vprojects data to be created
     * @param {module:api/VprojectsApi~createvprojectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vprojects}
     */
    createvprojects(vprojects, callback) {
      let postBody = vprojects;
      // verify the required parameter 'vprojects' is set
      if (vprojects === undefined || vprojects === null) {
        throw new Error("Missing the required parameter 'vprojects' when calling createvprojects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vprojects;
      return this.apiClient.callApi(
        '/vprojects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletevprojects operation.
     * @callback module:api/VprojectsApi~deletevprojectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} vprojectsId the Id parameter
     * @param {module:api/VprojectsApi~deletevprojectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletevprojects(vprojectsId, callback) {
      let postBody = null;
      // verify the required parameter 'vprojectsId' is set
      if (vprojectsId === undefined || vprojectsId === null) {
        throw new Error("Missing the required parameter 'vprojectsId' when calling deletevprojects");
      }

      let pathParams = {
        'vprojectsId': vprojectsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vprojects/{vprojectsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllvprojects operation.
     * @callback module:api/VprojectsApi~getAllvprojectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vprojects>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/VprojectsApi~getAllvprojectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vprojects>}
     */
    getAllvprojects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vprojects];
      return this.apiClient.callApi(
        '/vprojects/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getvprojects operation.
     * @callback module:api/VprojectsApi~getvprojectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vprojects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} vprojectsId the Id parameter
     * @param {module:api/VprojectsApi~getvprojectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vprojects}
     */
    getvprojects(vprojectsId, callback) {
      let postBody = null;
      // verify the required parameter 'vprojectsId' is set
      if (vprojectsId === undefined || vprojectsId === null) {
        throw new Error("Missing the required parameter 'vprojectsId' when calling getvprojects");
      }

      let pathParams = {
        'vprojectsId': vprojectsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vprojects;
      return this.apiClient.callApi(
        '/vprojects/{vprojectsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatevprojects operation.
     * @callback module:api/VprojectsApi~updatevprojectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vprojects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} vprojectsId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Vprojects} opts.vprojects data to be updated
     * @param {module:api/VprojectsApi~updatevprojectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vprojects}
     */
    updatevprojects(vprojectsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['vprojects'];
      // verify the required parameter 'vprojectsId' is set
      if (vprojectsId === undefined || vprojectsId === null) {
        throw new Error("Missing the required parameter 'vprojectsId' when calling updatevprojects");
      }

      let pathParams = {
        'vprojectsId': vprojectsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vprojects;
      return this.apiClient.callApi(
        '/vprojects/{vprojectsId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
